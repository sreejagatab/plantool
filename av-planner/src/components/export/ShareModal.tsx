import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  X, Mail, Link, Facebook, Twitter, Linkedin, 
  Copy, Check, Send, MessageCircle 
} from 'lucide-react';
import { formatCurrency } from '../../utils/formatters';

interface ShareModalProps {
  isOpen: boolean;
  onClose: () => void;
  formData: {
    eventName: string;
    eventDate: string;
    location: string;
    guestCount: string;
    selectedPackage: string;
  };
  pricing: {
    total: number;
  };
}

const ShareModal: React.FC<ShareModalProps> = ({
  isOpen,
  onClose,
  formData,
  pricing
}) => {
  const [copiedLink, setCopiedLink] = useState(false);
  const [emailSent, setEmailSent] = useState(false);
  const [emailData, setEmailData] = useState({
    to: '',
    subject: `AV Quote for ${formData.eventName}`,
    message: ''
  });

  // Generate shareable link (in a real app, this would be a backend-generated link)
  const generateShareableLink = () => {
    const baseUrl = window.location.origin;
    const quoteId = btoa(JSON.stringify({ formData, pricing })).slice(0, 16);
    return `${baseUrl}/quote/${quoteId}`;
  };

  const shareableLink = generateShareableLink();

  // Generate share text
  const getShareText = () => {
    return `Check out this AV quote for ${formData.eventName} - ${formatCurrency(pricing.total)} for ${formData.guestCount} guests. Professional audiovisual solutions made easy!`;
  };

  // Copy link to clipboard
  const copyLink = async () => {
    try {
      await navigator.clipboard.writeText(shareableLink);
      setCopiedLink(true);
      setTimeout(() => setCopiedLink(false), 2000);
    } catch (error) {
      console.error('Failed to copy link:', error);
    }
  };

  // Email sharing
  const sendEmail = () => {
    const subject = encodeURIComponent(emailData.subject);
    const body = encodeURIComponent(
      `${emailData.message}\n\n` +
      `Event: ${formData.eventName}\n` +
      `Date: ${formData.eventDate}\n` +
      `Location: ${formData.location}\n` +
      `Guests: ${formData.guestCount}\n` +
      `Package: ${formData.selectedPackage}\n` +
      `Total: ${formatCurrency(pricing.total)}\n\n` +
      `View full quote: ${shareableLink}\n\n` +
      `Generated by AV Planner - Professional Audiovisual Solutions`
    );
    
    if (emailData.to) {
      window.open(`mailto:${emailData.to}?subject=${subject}&body=${body}`);
    } else {
      window.open(`mailto:?subject=${subject}&body=${body}`);
    }
    
    setEmailSent(true);
    setTimeout(() => setEmailSent(false), 3000);
  };

  // Social media sharing
  const shareOnSocial = (platform: string) => {
    const text = encodeURIComponent(getShareText());
    const url = encodeURIComponent(shareableLink);
    
    const urls = {
      facebook: `https://www.facebook.com/sharer/sharer.php?u=${url}&quote=${text}`,
      twitter: `https://twitter.com/intent/tweet?text=${text}&url=${url}`,
      linkedin: `https://www.linkedin.com/sharing/share-offsite/?url=${url}&summary=${text}`,
      whatsapp: `https://wa.me/?text=${text}%20${url}`
    };
    
    window.open(urls[platform as keyof typeof urls], '_blank', 'width=600,height=400');
  };

  const modalVariants = {
    hidden: { opacity: 0, scale: 0.8 },
    visible: { opacity: 1, scale: 1 },
    exit: { opacity: 0, scale: 0.8 }
  };

  const overlayVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1 },
    exit: { opacity: 0 }
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
          {/* Overlay */}
          <motion.div
            className="absolute inset-0 bg-black bg-opacity-50"
            variants={overlayVariants}
            initial="hidden"
            animate="visible"
            exit="exit"
            onClick={onClose}
          />
          
          {/* Modal */}
          <motion.div
            className="relative bg-white rounded-2xl shadow-2xl w-full max-w-md max-h-[90vh] overflow-y-auto"
            variants={modalVariants}
            initial="hidden"
            animate="visible"
            exit="exit"
            transition={{ duration: 0.2 }}
          >
            {/* Header */}
            <div className="flex items-center justify-between p-6 border-b border-gray-200">
              <h3 className="text-xl font-semibold text-gray-800">Share Your Quote</h3>
              <button
                onClick={onClose}
                className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
              >
                <X className="w-5 h-5 text-gray-500" />
              </button>
            </div>

            <div className="p-6 space-y-6">
              {/* Quote Summary */}
              <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg p-4">
                <h4 className="font-semibold text-gray-800 mb-2">{formData.eventName}</h4>
                <div className="text-sm text-gray-600 space-y-1">
                  <div>üìÖ {formData.eventDate}</div>
                  <div>üìç {formData.location}</div>
                  <div>üë• {formData.guestCount} guests</div>
                  <div className="text-lg font-bold text-blue-600 mt-2">
                    {formatCurrency(pricing.total)}
                  </div>
                </div>
              </div>

              {/* Copy Link */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Shareable Link
                </label>
                <div className="flex items-center space-x-2">
                  <input
                    type="text"
                    value={shareableLink}
                    readOnly
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-sm"
                  />
                  <motion.button
                    onClick={copyLink}
                    className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                      copiedLink
                        ? 'bg-green-100 text-green-700'
                        : 'bg-blue-100 text-blue-700 hover:bg-blue-200'
                    }`}
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    {copiedLink ? (
                      <>
                        <Check className="w-4 h-4 mr-1 inline" />
                        Copied!
                      </>
                    ) : (
                      <>
                        <Copy className="w-4 h-4 mr-1 inline" />
                        Copy
                      </>
                    )}
                  </motion.button>
                </div>
              </div>

              {/* Email Sharing */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Send via Email
                </label>
                <div className="space-y-3">
                  <input
                    type="email"
                    placeholder="Recipient email (optional)"
                    value={emailData.to}
                    onChange={(e) => setEmailData(prev => ({ ...prev, to: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                  <input
                    type="text"
                    placeholder="Subject"
                    value={emailData.subject}
                    onChange={(e) => setEmailData(prev => ({ ...prev, subject: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                  <textarea
                    placeholder="Add a personal message (optional)"
                    value={emailData.message}
                    onChange={(e) => setEmailData(prev => ({ ...prev, message: e.target.value }))}
                    rows={3}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                  />
                  <motion.button
                    onClick={sendEmail}
                    className={`w-full px-4 py-2 rounded-lg font-medium transition-colors ${
                      emailSent
                        ? 'bg-green-100 text-green-700'
                        : 'bg-blue-600 text-white hover:bg-blue-700'
                    }`}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    {emailSent ? (
                      <>
                        <Check className="w-4 h-4 mr-2 inline" />
                        Email Opened!
                      </>
                    ) : (
                      <>
                        <Mail className="w-4 h-4 mr-2 inline" />
                        Send Email
                      </>
                    )}
                  </motion.button>
                </div>
              </div>

              {/* Social Media Sharing */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">
                  Share on Social Media
                </label>
                <div className="grid grid-cols-2 gap-3">
                  <motion.button
                    onClick={() => shareOnSocial('facebook')}
                    className="flex items-center justify-center px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <Facebook className="w-4 h-4 mr-2" />
                    Facebook
                  </motion.button>
                  
                  <motion.button
                    onClick={() => shareOnSocial('twitter')}
                    className="flex items-center justify-center px-4 py-3 bg-sky-500 text-white rounded-lg hover:bg-sky-600 transition-colors"
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <Twitter className="w-4 h-4 mr-2" />
                    Twitter
                  </motion.button>
                  
                  <motion.button
                    onClick={() => shareOnSocial('linkedin')}
                    className="flex items-center justify-center px-4 py-3 bg-blue-700 text-white rounded-lg hover:bg-blue-800 transition-colors"
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <Linkedin className="w-4 h-4 mr-2" />
                    LinkedIn
                  </motion.button>
                  
                  <motion.button
                    onClick={() => shareOnSocial('whatsapp')}
                    className="flex items-center justify-center px-4 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <MessageCircle className="w-4 h-4 mr-2" />
                    WhatsApp
                  </motion.button>
                </div>
              </div>

              {/* Additional Options */}
              <div className="border-t border-gray-200 pt-4">
                <p className="text-xs text-gray-500 text-center">
                  Share this quote with colleagues, vendors, or stakeholders. 
                  The link will remain active for 30 days.
                </p>
              </div>
            </div>
          </motion.div>
        </div>
      )}
    </AnimatePresence>
  );
};

export default ShareModal;
